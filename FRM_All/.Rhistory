P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
plot(xhat,
type="l",
col="blue",
xlab="Iteration",
ylab="Volts",
ylim=1.05 * c(min(z,true_value,xhat),max(z,true_value,xhat))
)
points(z,  pch=2)
abline(true_value,0)
plot(Pminus[2:count],type="l",xlab="Iteration", ylab=substitute(Variance~(Volts^2 )))
true_value
par(mfrow=c(2,1))
plot(xhat,
type="l",
col="blue",
xlab="Iteration",
ylab="Volts",
ylim=1.05 * c(min(z,true_value,xhat),max(z,true_value,xhat))
)
points(z,  pch=2)
abline(true_value,0)
min(z,true_value,xhat
)
rm(list = ls(all = TRUE))
libraries = c("FKF","quantmod","ggplot2","rjson")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
crix <- fromJSON(file = "http://data.thecrix.de/data/crix.json")
View(crix)
json_data_frame <- as.data.frame(crix)
View(json_data_frame)
# https://gist.github.com/mathew-hall/2ca753c68a594e2c37b1
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
View(crix)
crix <- as.data.frame(crix)
View(crix)
count = nrows(crix)
count = nrow(crix)
count
R
#estimate of measurement variance
R = 1**2
R
Q=1e-5 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
z = crix$price #observations
Q=1e-5 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
plot(xhat,
type="l",
col="blue",
xlab="Iteration",
ylab="Volts",
ylim=1.05 * c(min(z,true_value,xhat),max(z,true_value,xhat))
)
plot(xhat,
type="l",
col="blue",
xlab="Iteration",
ylab="Volts",
ylim=1.05 * c(min(z,xhat),max(z,xhat))
)
plot(xhat,
type="l",
col="blue",
xlab="Iteration",
ylab="Volts",
ylim=c(min(z,xhat),max(z,xhat))
)
points(z,  pch=2)
lines(x, z, col = "red",type="l",lwd = 1.5)
rm(list = ls(all = TRUE))
libraries = c("FKF","quantmod","ggplot2","rjson")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
save = "/Users/wkhaerdle/Documents/Project/Metis/"
# Get Stock price of sina
getSymbols("SINA",src='yahoo')
Price = SINA["2018"]
x= as.Date(.indexday(Price))
# x = x[-1]
Price = as.data.frame(Price)
y  = as.numeric(Price$SINA.Adjusted)
a0 <- y[1] # Estimation of the first width
x = x[-1]
y = y[-1]
# y = diff(log(y))
## Set constant parameters:
# dt <- ct <- matrix(3*rnorm(100,mean=100,sd=2.5), nrow = 1, ncol = 100)
dt <- ct <- matrix(0)
Zt <- Tt <- array(1,c(1,1,1))
P0 <- matrix(10) # Variance of 'a0'
## Estimate parameters:
fit.fkf <- optim(c(HHt = var(y, na.rm = TRUE) * .5,
GGt = var(y, na.rm = TRUE) * .5),
fn = function(par, ...)
-fkf(HHt = matrix(par[1]), GGt = matrix(par[2]), ...)$logLik,
yt = rbind(y), a0 = a0, P0 = P0, dt = dt, ct = ct,
Zt = Zt, Tt = Tt)
## Filter tree ring data with estimated parameters:
fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, HHt = array(fit.fkf$par[1],c(1,1,1)),
GGt = array(fit.fkf$par[2],c(1,1,1)), yt = rbind(y))
## Plot the width together with fitted local levels:
png(paste0(save,'PricePrediction.png'),width=1000,height=600,units="px",bg = "transparent")
predict = fkf.obj$at[1, ]
plot(x,col="blue",type="l",xlab = "Date",ylab ="price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines( predict[-1], col = "red",type="l",lwd = 1.5)
dev.off()
predict = fkf.obj$at[1, ]
plot(x,col="blue",type="l",xlab = "Date",ylab ="price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines( predict[-1], col = "red",type="l",lwd = 1.5)
plot(x,y,col="blue",type="l",xlab = "Date",ylab ="price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = crix$price #observations
Q=1e-5 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
plot(crix$date,z,col="blue",type="l",xlab = "Date",ylab ="price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
crix$date
.indexday(Price)
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
# true_value = -0.37727 #actual value
z = log(crix$price) #observations
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = log(crix$price) #observations
Q=1e-5 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="log price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
Q=var(z) #process variance
Q
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = log(crix$price) #observations
Q=var(z) #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="log price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
z
xhat
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = log(crix$price) #observations
Q=0 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="log price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = log(crix$price) #observations
Q=0.5 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="log price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
K
P[k-1]
Pminus
# true_value = -0.37727 #actual value
z = diff(log(crix$price)) #observations
z
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = c(0, diff(log(crix$price))) #observations
Q=0.5 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date[-1])
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="log price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="log price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Daily Return",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
crix <- read.csv(file = "http://data.thecrix.de/data/crix.csv", header = TRUE)
crix <- as.data.frame(crix)
count = nrow(crix)
# true_value = -0.37727 #actual value
z = c(0, diff(log(crix$price))) #observations
Q=5^e-5 #process variance
Q=5^10-5 #process variance
Q
Q= 0.0005 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Daily Return",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
count = nrow(crix)
# true_value = -0.37727 #actual value
# z = c(0, diff(log(crix$price))) #observations
z = crix$price
Q= 0.0005 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Daily Return",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
z = log(crix$price)
Q= 0.0005 #process variance
#Allocate space:
xhat = rep(0,count) #a posteri estimate at each step
P = rep(0,count)  #a posteri error estimate
xhatminus=rep(0,count) #a priori estimate
Pminus=rep(0,count) #a priori error estimate
K=rep(0,count) #gain
#estimate of measurement variance
R = 1**2
#initialise guesses: assume true_value=0, error is 1.0
xhat[1] <- z[1]
P[1] <- 1
for (k in 2:count){
#time update
xhatminus[k] <- xhat[k-1]
Pminus[k] <- P[k-1] + Q
#measurement update
K[k] = Pminus[k] / (Pminus[k] + R)
xhat[k] = xhatminus[k] + K[k] * (z[k] - xhatminus[k])
P[k] = (1-K[k]) * Pminus[k]
}
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Daily Return",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
save = "/Users/wkhaerdle/Documents/Project/Metis/"
png(paste0(save,'CrixPrice_Kalman.png'),width=1000,height=600,units="px",bg = "transparent")
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
dev.off()
K
z[k] - xhatminus[k]
xhatminus
save = "/Users/wkhaerdle/Documents/Project/Metis/"
png(paste0(save,'CrixPrice_Kalman.png'),width=1000,height=600,units="px",bg = "transparent")
par(mfrow=c(2,1))
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
dev.off()
save = "/Users/wkhaerdle/Documents/Project/Metis/"
png(paste0(save,'CrixPrice_Kalman.png'),width=1000,height=600,units="px",bg = "transparent")
x= as.Date(crix$date)
plot(x,z,col="blue",type="l",xlab = "Date",ylab ="Price",lwd = 1.5,cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x, xhat, col = "red",type="l",lwd = 1.5)
dev.off()
x
x[2430]
R
rm(list = ls(all = TRUE))
libraries = c("xlsx","scales","ggplot2","dplyr","gcookbook")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
#----------------------------------------START UPDATE----------------------------------------
wdir = "/Users/wkhaerdle/Documents/Project/FRM-master_Modify_WRT/FRM_Quantlet/FRM_All/"
setwd(wdir)
output_path = "Output/Asia/Adj_Matrices_test"
result1 = read.csv(file = paste0(output_path, "/MarcoScores.csv"), header = TRUE)
result1 = result1[result1$Date<20190717,]
result2 = read.csv(file = paste0(output_path, "/MarcoScores_2.csv"), header = TRUE)
result2 = result2[result2$Date>=20190717,]
result = rbind(result1, result2)
result$Date = as.Date(paste0(floor(result$Date / 10000),"-",
floor(result$Date / 100) -floor(result$Date / 10000)*100,"-",
result$Date - floor(result$Date / 100) * 100))
Type = names(result)
Column = intersect(which(Type!="X"), which(Type!="Date"))
datebreaks <- seq(result$Date[1], result$Date[length(result$Date)],
by = "1 month")
Column
=13
iCol=13
name_col = Type[iCol]
name_col
Type
Column
iCol=3
name_col = Type[iCol]
exec <- parse(text = paste0('ggplot(result, aes(x = Date, y = ', name_col,')) +  geom_line()'))
econ_plot <- eval(exec)
png(paste0(output_path, "/MacroScore_", name_col, ".png"), width = 900, height = 600, bg = "transparent")
print(econ_plot +
scale_x_date(breaks = datebreaks) +
theme(axis.text.x = element_text(angle = 30, hjust = 1), panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.line = element_line(colour = "black")))
dev.off()
